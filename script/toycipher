#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), "../lib")
require 'optparse'
require 'toycipher'

CIPHERS = ToyCipher::CIPHERS

class OptParseToyCipher
  def self.parse args
    begin
      #puts "CIPHERS: #{CIPHERS * ', '}"
      options = {}
      option_parser = OptionParser.new do |opts|
        opts.on("-h", "--help", "Print this help screen") { puts opts; exit 0; }
        opts.on("-k", "--key key", "Encryption Key") { |k| options[:key] = k }
        opts.on("-o", "--output-file [file]", "Output file for results, defaults to STDOUT") { |f| 
          options[:outfile] = f }
        opts.on("-i", "--input-file file", "Input file for encryption or decryption") do |f|
          options[:infile] = f
        end
        opts.on("--demo", "Example Ciphers") { options[:demo] = true }
        opts.on("-d", "--decrypt [ciphertext]", "Ciphertext to decrypt") { |d| 
          options[:ciphertext] = d }
        opts.on("-e", "--encrypt [plaintext]", "Plaintext to encrypt") { |e| 
          options[:plaintext] = e }
        opts.on("-p", "--pretty", "Pretty output by replacing Z with space") { |p|
          options[:pretty] = true }
        ciphers = CIPHERS.sort.join ','
        opts.on("-c", "--cipher cipher", CIPHERS, "List of Ciphers:", 
        "(#{ciphers})") do |c| 
          options[:cipher] = c 
          options[:cipher][0] = c[0].chr.upcase # :(
        end
        opts.on("-t", "--transpose", "Transpose m x n lines of text to be n x m") do
          options[:transpose] = true
        end
        opts.on("-v", "--verbose") { options[:verbose], options[:debug] = true, true }
      end
      option_parser.parse!(args)
      options
    rescue OptionParser::ParseError => error
      puts error.message
      exit -1
    end
  end
end

@options = OptParseToyCipher.parse ARGV
puts "options: #{options.inspect}" if @options[:debug]
raise ArgumentError, "No cipher specified!  Expected one of #{CIPHERS * ', '}" unless @options[:cipher] && 
  CIPHERS.include?(@options[:cipher].downcase)
#puts options[:plaintext]



if keys = @options[:key]
  keys.split(',').each { |k| (@keys ||= []) << k.strip }
end
#puts "keys: #{@keys}"

def print_result(results)
  results.each do |result|
    # Pretty output by guessing that 'Z' is a space (risky)
    if @options[:pretty]
      case @options[:cipher]
      when /playfair/i
        result.gsub!(' ', '')
        result.gsub!(/x/i, '')
      end
      result.gsub!(/z/i, ' ')
    end
    #puts "result: #{result}"
    (@all_results ||= []) << result
  end

  if @options[:outfile]
    File.open(@options[:outfile], 'w') { |f| f << @all_results * "\n" }
  else
    STDOUT.puts @all_results * "\n"
  end
end

def prepare_input
  stream = IO.readlines @options[:infile] 
end

prepare_input_file if @options[:infile]

@keys.each do |k|
  # FIXME:  Move this
  @cipher = instance_eval "ToyCipher::#{@options[:cipher]}.new"
  #puts "Running on key: #{k}"
  begin
    @result =
      if @options[:plaintext]
        @cipher.encrypt(@options[:plaintext], k) if @options[:plaintext]
      elsif @options[:ciphertext]
        @cipher.decrypt(@options[:ciphertext], k) if @options[:ciphertext]
      else
      end
    #puts "calc result: #{@result}"
  rescue Exception => pf
    STDOUT.puts "Could not decrypt ciphertext: #{pf.message}"
    exit -1
  end
  (@results ||= []) << @result
end

print_result(@results) if @results


